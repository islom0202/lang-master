name: Deploy to EC2

on:
  push:
    branches:
      - main  # Triggers only on push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Java Development Kit (JDK)
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # 3. Make the Gradle wrapper executable
      - name: Set execute permission on gradlew
        run: chmod +x ./gradlew

      # 4. Build the project with Gradle, skipping tests
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # 5. Verify the build output
      - name: Check JAR file
        run: ls -la build/libs

      # 6. Upload the JAR file to the EC2 server
      - name: Upload JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "build/libs/*.jar"
          target: "/home/${{ secrets.SERVER_USER }}/app"
          strip_components: 2 # Removes 'build/libs' from the path

      # 7. Execute deployment script on the EC2 server
      - name: Run app on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Define the application directory
            APP_DIR="/home/${{ secrets.SERVER_USER }}/app"
            mkdir -p $APP_DIR
            
            # Install necessary packages if they are not already present
            sudo dnf install -y java-21-amazon-corretto-headless procps

            # Find and kill the old running application process safely
            # This is safer than 'pkill' as it targets the specific JAR
            PID=$(ps -f | grep "java -jar $APP_DIR" | grep -v grep | awk '{print $2}')
            if [ -n "$PID" ]; then
              echo "Stopping old process with PID: $PID"
              kill -15 $PID # Send a termination signal
              sleep 5      # Wait for graceful shutdown
            else
              echo "No old process found. Skipping."
            fi

            # Navigate to the application directory
            cd $APP_DIR

            # Start the new application in the background using nohup
            # This ensures the process keeps running after the SSH session closes
            nohup java -jar *.jar > app.log 2>&1 &

            echo "âœ… Deployment script finished. Application is starting."
            sleep 5 # Give the app a moment to initialize

            # Check for the running Java process to confirm it started
            echo "Current Java processes:"
            ps aux | grep "[j]ava -jar" || echo "No Java process detected yet. Check logs at $APP_DIR/app.log"
