name: Deploy to EC2

on:
  push:
    branches:
      - main  # Triggers only on push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Java Development Kit (JDK)
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # 3. Make the Gradle wrapper executable
      - name: Set execute permission on gradlew
        run: chmod +x ./gradlew

      # 4. Build the project with Gradle, skipping tests
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # 5. Verify the build output
      - name: Check JAR file
        run: ls -la build/libs

      # 6. Upload the JAR file to the EC2 server
      - name: Upload JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "build/libs/*.jar"
          target: "/home/${{ secrets.SERVER_USER }}/app"
          strip_components: 2 # Removes 'build/libs' from the path

      # 7. Execute deployment script on the EC2 server
      - name: Run app on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Define the application directory
            APP_DIR="/home/${{ secrets.SERVER_USER }}/app"
            
            # Ensure the app directory exists
            mkdir -p $APP_DIR
            
            # Install necessary packages if not present
            sudo dnf install -y java-21-amazon-corretto-headless procps curl

            # Find the executable JAR, EXCLUDING the 'plain' one.
            EXECUTABLE_JAR=$(ls $APP_DIR/*.jar | grep -v 'plain.jar' | head -n 1)
            if [ -z "$EXECUTABLE_JAR" ]; then
              echo "ERROR: No executable JAR file found. Aborting."
              exit 1
            fi
            echo "Found executable JAR: $EXECUTABLE_JAR"

            # Find and kill the old running application process safely
            PID=$(ps -f | grep "$EXECUTABLE_JAR" | grep -v grep | awk '{print $2}')
            if [ -n "$PID" ]; then
              echo "Stopping old process with PID: $PID"
              kill -15 $PID
              while ps -p $PID > /dev/null; do sleep 1; done
              echo "Process stopped."
            else
              echo "No old process found. Skipping."
            fi

            # Start the new application. Spring Boot will automatically use the
            # SPRING_DATASOURCE_* environment variables we passed in.
            echo "Starting new application: $EXECUTABLE_JAR"
            nohup java -jar $EXECUTABLE_JAR > $APP_DIR/app.log 2>&1 & disown

            echo "âœ… Deployment script finished. Waiting for application to start..."
            sleep 15

            # --- DIAGNOSTICS ---
            echo "--- Displaying application log (app.log) ---"
            cat $APP_DIR/app.log

            echo "--- Checking for running Java process ---"
            ps aux | grep "[j]ava -jar" || echo "ERROR: Java process not found!"

            echo "--- Checking application health on localhost:8081 ---"
            curl -f http://localhost:8081 || echo "ERROR: Application not responding on port 8081. Check app.log for errors."
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.DB_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USER }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}